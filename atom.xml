<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Davide Caruso</title>
  
  <subtitle>d10p</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://davidecaruso.github.io/"/>
  <updated>2020-03-27T08:44:14.370Z</updated>
  <id>https://davidecaruso.github.io/</id>
  
  <author>
    <name>Davide Caruso</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB integration tests with Mocha</title>
    <link href="https://davidecaruso.github.io/2020/03/26/mongodb-integration-tests-mocha/"/>
    <id>https://davidecaruso.github.io/2020/03/26/mongodb-integration-tests-mocha/</id>
    <published>2020-03-26T17:04:32.000Z</published>
    <updated>2020-03-27T08:44:14.370Z</updated>
    
    <content type="html"><![CDATA[<p>This guide helps you to run integration tests – and feature tests as well – in a Node.js application.</p><h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><p>This methodology was tested in a Node.js application written in TypeScript, which makes use of <a href="https://mongoosejs.com/" target="_blank" rel="noopener">mongoose</a> for the MongoDB connection and <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a> + <a href="https://www.chaijs.com/" target="_blank" rel="noopener">chai</a> for tests.</p><p>The code does not use TypeScript features – except for library import method, so you can use it also in a vanilla Node.js codebase.</p><h2 id="Mocker-middleware"><a href="#Mocker-middleware" class="headerlink" title="Mocker middleware"></a>Mocker middleware</h2><p>The first step is to create our <em>createDatabase</em> middleware.</p><p>Note that the connection uri to the MongoDB database comes from an environment variable called <strong>MONGODB_DATABASE</strong> in the <em>.env</em> file. </p><script src="https://gist.github.com/davidecaruso/11cdc338e6641905c5f811488b3e695d.js"></script><p>The <em>connect</em> function creates a connection to the same uri string BUT with the <strong>Test</strong> suffix. This will create a <em>mock</em> database. This function is called before the first test – <em>before</em> hook.</p><p>The <em>clear</em> function drops the database, so the next test will have an empty database. This run after each test – <em>afterEach</em> hook. </p><p>The <em>close</em> function closes definitely the connection with the database and is run after the last test – <em>after</em> hook.</p><h2 id="Using-it-in-tests"><a href="#Using-it-in-tests" class="headerlink" title="Using it in tests"></a>Using it in tests</h2><p>As mentioned before, the script uses three <a href="https://mochajs.org/#hooks" target="_blank" rel="noopener">Mocha hooks</a>, that because it receives them and the test suite itself as arguments.</p><p>So create the test passing those hooks as first arguments and entire test block as the callback function argument of the middleware.</p><script src="https://gist.github.com/davidecaruso/ee6a855327949f83ab1d2d52ad933583.js"></script><p><br><br>Bye.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This guide helps you to run integration tests – and feature tests as well – in a Node.js application.&lt;/p&gt;
&lt;h2 id=&quot;Assumptions&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="testing" scheme="https://davidecaruso.github.io/tags/testing/"/>
    
      <category term="typescript" scheme="https://davidecaruso.github.io/tags/typescript/"/>
    
      <category term="mocha" scheme="https://davidecaruso.github.io/tags/mocha/"/>
    
      <category term="chai" scheme="https://davidecaruso.github.io/tags/chai/"/>
    
      <category term="nodejs" scheme="https://davidecaruso.github.io/tags/nodejs/"/>
    
      <category term="mongodb" scheme="https://davidecaruso.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Testing Laravel with Dusk and SQLite</title>
    <link href="https://davidecaruso.github.io/2019/01/25/laravel-dusk-sqlite/"/>
    <id>https://davidecaruso.github.io/2019/01/25/laravel-dusk-sqlite/</id>
    <published>2019-01-25T14:14:10.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://laravel.com/docs/5.7/dusk" target="_blank" rel="noopener">Laravel Dusk</a> is a helpful tool to perform browser-automated tests using a standalone ChromeDriver installation. In order to use a different environment – therefore a different database – we have to set a bunch of configs. Even if Dusk is ready-to-use after the installation, using it with a SQLite database could be very tricky, and is also hard to find documentation about it.</p><h2 id="Create-a-brand-new-database-connection"><a href="#Create-a-brand-new-database-connection" class="headerlink" title="Create a brand new database connection"></a>Create a brand new database connection</h2><p>The first thing you have to do is create a new database connection in the <strong>config/database.php</strong> file – you can also use the existing <em>sqlite</em> connection:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">'connections'</span> =&gt; [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="string">'dusk'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'sqlite'</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; database_path(<span class="string">'database.sqlite'</span>),</span><br><span class="line">            <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="string">'foreign_key_constraints'</span> =&gt; env(<span class="string">'DB_FOREIGN_KEYS'</span>, <span class="keyword">true</span>),</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>This configuration will use a database file named <strong>database.sqlite</strong> inside the <em>database</em> folder. If something doesn’t work, create the file manually:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch database/database.sqlite</span><br></pre></td></tr></table></figure><h2 id="Setting-up-the-environment"><a href="#Setting-up-the-environment" class="headerlink" title="Setting up the environment"></a>Setting up the environment</h2><p>The next step is to create a copy of the <strong>.env</strong> file named <strong>.env.dusk</strong><sup>1</sup>, leaving everything as is but changing only few variables:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ...</span><br><span class="line">APP_ENV=testing</span><br><span class="line"># ...</span><br><span class="line"></span><br><span class="line">DB_CONNECTION=dusk</span><br><span class="line">#DB_HOST=127.0.0.1</span><br><span class="line">#DB_PORT=3306</span><br><span class="line">#DB_DATABASE=homestead</span><br><span class="line">#DB_USERNAME=homestead</span><br><span class="line">#DB_PASSWORD=secret</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure></p><p>Comment or delete all <strong>DB_&#42;</strong> variables, set the <strong>DB_CONNECTION</strong> to <em>dusk</em> and make sure that the <strong>APP_ENV</strong> is <em>testing</em>.</p><blockquote><p>1. On the web you may find <strong>.env.dusk.testing</strong> or <strong>.env.dusk.local</strong> doesn’t seem to be working.</p></blockquote><h2 id="Run-Dusk-tests"><a href="#Run-Dusk-tests" class="headerlink" title="Run Dusk tests"></a>Run Dusk tests</h2><p>Be loaded, we are finishing.<br>Lastly, we have to clear previous config and serve the project using the correct environment:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan config:clear</span><br><span class="line">php artisan serve --env=dusk</span><br></pre></td></tr></table></figure></p><p>Now we can run Dusk tests as we commonly do:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan dusk</span><br></pre></td></tr></table></figure></p><p>And should work <img class="github-emoji" style="display:inline" title="tada" alt="tada" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v7" height="20" width="20"></p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://laravel.com/docs/5.7/dusk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laravel Dusk&lt;/a&gt; is a helpful tool to perform browser-automate
      
    
    </summary>
    
    
      <category term="laravel" scheme="https://davidecaruso.github.io/tags/laravel/"/>
    
      <category term="dusk" scheme="https://davidecaruso.github.io/tags/dusk/"/>
    
      <category term="testing" scheme="https://davidecaruso.github.io/tags/testing/"/>
    
      <category term="sqlite" scheme="https://davidecaruso.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection vs Dependency Inversion</title>
    <link href="https://davidecaruso.github.io/2018/05/29/dependency-injection-vs-dependency-inversion/"/>
    <id>https://davidecaruso.github.io/2018/05/29/dependency-injection-vs-dependency-inversion/</id>
    <published>2018-05-29T11:59:39.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p>The <em>Dependency Injection</em> and the <em>Dependency Inversion</em> are concepts closely related and often confused with each other – maybe for their similar names – but are different. </p><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p>The <em>Dependency Injection</em> is a structural <strong>Design Pattern</strong>. It helps to decouple our code base with external components thus will be easier to test it, refactor it and moreover control its dependencies.</p><p>An example of coupled dependency could be the following:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">viewAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $repository = <span class="keyword">new</span> UserRepository();</span><br><span class="line">        $user = $repository-&gt;getById(<span class="number">42</span>);</span><br><span class="line">        <span class="keyword">return</span> $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <em>UserRepository</em> is tightly coupled to the <em>User</em> class, and it’ll be a problem if we need to rafactor the method by which we retrieved data from database or maybe switching to a different database storage.</p><p>A solution is to define a <em>contract</em> between the class and its dependency through a <em>setter injection</em>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $repository;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUserRepository</span><span class="params">(UserRepository $repo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;repository = $repo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">viewAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;repository-&gt;getById(<span class="number">42</span>);</span><br><span class="line">        <span class="keyword">return</span> $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// and then</span></span><br><span class="line"></span><br><span class="line">$controller = <span class="keyword">new</span> UserController();</span><br><span class="line">$controller-&gt;setUserRepository(<span class="keyword">new</span> UserRepository());</span><br><span class="line">$user = $controller-&gt;viewAction();</span><br></pre></td></tr></table></figure></p><p>Though this solutions works, each time we use the user class we need to <em>set</em> the repository property, and even more if we forgot to do this could be some errors.</p><p>So the better solution is the <em>constructor injection</em>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $repository;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository $repo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;repository = $repo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">viewAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;repository-&gt;getById(<span class="number">42</span>);</span><br><span class="line">        <span class="keyword">return</span> $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// and then</span></span><br><span class="line"></span><br><span class="line">$controller = <span class="keyword">new</span> UserController(<span class="keyword">new</span> UserRepository());</span><br><span class="line">$user = $controller-&gt;viewAction();</span><br></pre></td></tr></table></figure></p><p>Now we can safely change the repository for the <em>UserController</em> class when necessary and test it easily.</p><h2 id="Dependency-Inversion"><a href="#Dependency-Inversion" class="headerlink" title="Dependency Inversion"></a>Dependency Inversion</h2><p>The <em>Dependency Inversion</em> is one of the <strong>SOLID Principles</strong>. It states:</p><blockquote><p>High level modules should not depend upon low level modules. Both should<br>  depend upon abstractions.</p></blockquote><p>And:</p><blockquote><p>Abstractions should not depend upon details. Details should depend upon<br>  abstractions.</p></blockquote><p>It helps to not couple our code base to concretions but to abstractions, thus we can safely change functionalities without worrying about broken code.</p><p>Let’s take as example a class which manages a game:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $input;</span><br><span class="line">    <span class="keyword">protected</span> $video;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;input = <span class="keyword">new</span> KeyboardInput();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;video = <span class="keyword">new</span> ScreenOutput();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// accept user input from $this-&gt;input</span></span><br><span class="line">        <span class="comment">// draw the game state on $this-&gt;video</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The class is depending on two low level classes: <em>KeyboardInput</em> and <em>ScreenOutput</em>. If we ever want to change how input or output are handled in this class, such as switching to a joystick or terminal output, or switch platforms entirely, we can’t. We have a hard dependency on these two classes.</p><p>What we can do is invert this dependency to abstractions instead of concretions  using the <em>InputInterface</em> and the <em>OutputInterface</em> – note that we are using the <em>Dependency Injection</em> pattern:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $input;</span><br><span class="line">    <span class="keyword">protected</span> $video;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        InputInterface $input,</span></span></span><br><span class="line"><span class="function"><span class="params">        OutputInterface $output</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;input = $input;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;video = $output;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// accept user input from $this-&gt;input</span></span><br><span class="line">        <span class="comment">// draw the game state on $this-&gt;video</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyboardInput</span> <span class="keyword">implements</span> <span class="title">InputInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInputEvent</span><span class="params">()</span> </span>&#123; <span class="comment">/*...*/</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JoystickInput</span> <span class="keyword">implements</span> <span class="title">InputInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInputEvent</span><span class="params">()</span> </span>&#123; <span class="comment">/*...*/</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenOutput</span> <span class="keyword">implements</span> <span class="title">OutputInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123; <span class="comment">/*...*/</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerminalOutput</span> <span class="keyword">implements</span> <span class="title">OutputInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123; <span class="comment">/*...*/</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Doing that we can easily change functionalities in the future, and it will have a little impact upon the existing code.</p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The &lt;em&gt;Dependency Injection&lt;/em&gt; and the &lt;em&gt;Dependency Inversion&lt;/em&gt; are concepts closely related and often confused with each other –
      
    
    </summary>
    
    
      <category term="solid principles" scheme="https://davidecaruso.github.io/tags/solid-principles/"/>
    
      <category term="design patterns" scheme="https://davidecaruso.github.io/tags/design-patterns/"/>
    
      <category term="oop" scheme="https://davidecaruso.github.io/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>Laravel: how to quickly create dynamic routes</title>
    <link href="https://davidecaruso.github.io/2018/04/05/laravel-dynamic-routes/"/>
    <id>https://davidecaruso.github.io/2018/04/05/laravel-dynamic-routes/</id>
    <published>2018-04-05T09:13:26.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel allows to easily integrate dynamic routes with controllers and the related <em>Eloquent</em> models, without caring about how to get data from database. That is provided by a strict relation between the controller and the model, by using the <em>type hinting</em> inside the controller’s method and implementing a method of the model to set which is the relation.</p><h2 id="Put-in-practice"><a href="#Put-in-practice" class="headerlink" title="Put in practice"></a>Put in practice</h2><p>Supposing to have a <strong>Post</strong> model:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line"></span><br><span class="line">Route::resource(<span class="string">'/posts'</span>, <span class="string">'PostController'</span>)-&gt;only(<span class="string">'show'</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">Route::get(<span class="string">'/posts/&#123;post&#125;'</span>, <span class="string">'PostController@show'</span>);</span><br></pre></td></tr></table></figure></p><p>When the route <code>/post/slug-of-a-post</code> is triggered, then will be called the <em>show</em> method of <strong>PostController</strong>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// app/Http/Controllers/PostController.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(Request $request, Post $post)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'posts.show'</span>, [<span class="string">'post'</span> =&gt; $post]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>As you can see, the second parameter must be of type <strong>Post</strong>: this tell to Laravel to ask to the model to interpretate the route request. This is a mandatory step without which the next step would not work:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// app/Post.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $fillable = [</span><br><span class="line">        <span class="string">'author_id'</span>,</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'content'</span>,</span><br><span class="line">        <span class="string">'slug'</span></span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRouteKeyName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'slug'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The last step is to implement the <em>getRouteKeyName</em> method – inherited from the <em>Model</em> class – which consents to choose for which field the controller has to query for. If not implemented, it will search for the model’s primary key field by default, so the <em>id</em>.</p><h2 id="Alternative"><a href="#Alternative" class="headerlink" title="Alternative"></a>Alternative</h2><p>As said before, all depends on the type hinting inside the controller’s method. Well, what could happen if you change it? Let see:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// app/Http/Controllers/PostController.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(Request $request, string $slug)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $post = Post::where(<span class="string">'slug'</span>, $slug)-&gt;first();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'posts.show'</span>, [<span class="string">'post'</span> =&gt; $post]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In this way the controller gets the raw value passed in the route and is its duty to retrieve the post through the model.</p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Laravel allows to easily integrate dynamic routes with controllers and the related &lt;em&gt;Eloquent&lt;/em&gt; models, without caring about how to 
      
    
    </summary>
    
    
      <category term="php" scheme="https://davidecaruso.github.io/tags/php/"/>
    
      <category term="laravel" scheme="https://davidecaruso.github.io/tags/laravel/"/>
    
      <category term="routing" scheme="https://davidecaruso.github.io/tags/routing/"/>
    
  </entry>
  
  <entry>
    <title>How to delete a remote branch</title>
    <link href="https://davidecaruso.github.io/2018/03/27/how-to-delete-a-remote-branch/"/>
    <id>https://davidecaruso.github.io/2018/03/27/how-to-delete-a-remote-branch/</id>
    <published>2018-03-27T11:41:12.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Scenario</strong>: I want to delete a useless remote branch of my Git repository.</p><p><strong>Question</strong>: How can I delete it?</p><p><strong>Answer</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push REMOTE_NAME --delete BRANCH_NAME</span><br><span class="line"><span class="comment"># or shortly</span></span><br><span class="line">git push REMOTE_NAME :BRANCH_NAME</span><br></pre></td></tr></table></figure></p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;: I want to delete a useless remote branch of my Git repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;: How can I del
      
    
    </summary>
    
    
      <category term="snippet" scheme="https://davidecaruso.github.io/tags/snippet/"/>
    
      <category term="git" scheme="https://davidecaruso.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git: how to reset file permissions</title>
    <link href="https://davidecaruso.github.io/2018/03/27/git-reset-file-permissions/"/>
    <id>https://davidecaruso.github.io/2018/03/27/git-reset-file-permissions/</id>
    <published>2018-03-27T11:27:29.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Scenario</strong>: In a project which uses Git, I have changed my files’ permissions using the <code>chmod</code> command and I don’t want to reset them manually.</p><p><strong>Question</strong>: How can reset their permissions using Git?</p><p><strong>Answer</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># go to project directory</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/project</span><br><span class="line"><span class="comment"># optional: unstage all changes</span></span><br><span class="line">git reset HEAD --</span><br><span class="line"><span class="comment"># reset permissions</span></span><br><span class="line">git diff -p \</span><br><span class="line">    | grep -E <span class="string">'^(diff|old mode|new mode)'</span> \</span><br><span class="line">    | sed -e <span class="string">'s/^old/NEW/;s/^new/old/;s/^NEW/new/'</span> \</span><br><span class="line">    | git apply</span><br></pre></td></tr></table></figure></p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;: In a project which uses Git, I have changed my files’ permissions using the &lt;code&gt;chmod&lt;/code&gt; command and I d
      
    
    </summary>
    
    
      <category term="snippet" scheme="https://davidecaruso.github.io/tags/snippet/"/>
    
      <category term="git" scheme="https://davidecaruso.github.io/tags/git/"/>
    
      <category term="chmod" scheme="https://davidecaruso.github.io/tags/chmod/"/>
    
  </entry>
  
  <entry>
    <title>How to get last column letter of an Excel by the columns number</title>
    <link href="https://davidecaruso.github.io/2018/03/02/get-last-column-letter-by-columns-number/"/>
    <id>https://davidecaruso.github.io/2018/03/02/get-last-column-letter-by-columns-number/</id>
    <published>2018-03-02T16:55:14.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Scenario</strong>: I have raw data to write in an Excel report and I need to know which will be the last column.</p><p><strong>Question</strong>: How can I get it?</p><p><strong>Answer (<em>PHP</em>)</strong>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastColumnLetter</span><span class="params">(int $columns)</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $letter = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> ($columns != <span class="number">0</span>) &#123;</span><br><span class="line">        $ratio = ($columns - <span class="number">1</span>) % <span class="number">26</span>;</span><br><span class="line">        $columns = intval(($columns - $ratio) / <span class="number">26</span>);</span><br><span class="line">        $letter = chr(<span class="number">65</span> + $ratio) . $letter; <span class="comment">// Or 96 for lowercase letters</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $letter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> getLastColumnLetter(<span class="number">1</span>); <span class="comment">// A</span></span><br><span class="line"><span class="keyword">echo</span> getLastColumnLetter(<span class="number">26</span>); <span class="comment">// Z</span></span><br><span class="line"><span class="keyword">echo</span> getLastColumnLetter(<span class="number">52</span>); <span class="comment">// AZ</span></span><br><span class="line"><span class="keyword">echo</span> getLastColumnLetter(<span class="number">54</span>); <span class="comment">// BB</span></span><br><span class="line"><span class="keyword">echo</span> getLastColumnLetter(<span class="number">14943907276374871</span>); <span class="comment">// DAVIDECARUSO</span></span><br></pre></td></tr></table></figure></p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;: I have raw data to write in an Excel report and I need to know which will be the last column.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q
      
    
    </summary>
    
    
      <category term="snippet" scheme="https://davidecaruso.github.io/tags/snippet/"/>
    
      <category term="php" scheme="https://davidecaruso.github.io/tags/php/"/>
    
      <category term="excel-reports" scheme="https://davidecaruso.github.io/tags/excel-reports/"/>
    
  </entry>
  
  <entry>
    <title>Excel reports with PHP and Jasper</title>
    <link href="https://davidecaruso.github.io/2018/02/23/excel-reports-with-php-and-jasper/"/>
    <id>https://davidecaruso.github.io/2018/02/23/excel-reports-with-php-and-jasper/</id>
    <published>2018-02-23T10:55:20.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p>At least one time in the life of a developer has been happened the need to create an Excel file with data, maybe coming from database, external services or something else. For this reason all PHP developers certainly know <a href="https://github.com/PHPOffice/PHPExcel" target="_blank" rel="noopener">PHPExcel</a>, or its successor <a href="https://github.com/PHPOffice/PhpSpreadsheet" target="_blank" rel="noopener">PhpSpreadsheet</a>, and each one of them doesn’t wanna deal with it, unless necessary.</p><p>Not properly true: PHPExcel is a great library which saved all of us many times while programming, but often we don’t know which alternatives exist or maybe the report we have to generate is too complex and also its development with PHPExcel.</p><h2 id="Jasper-Studio"><a href="#Jasper-Studio" class="headerlink" title="Jasper Studio"></a>Jasper Studio</h2><p>Jasper Studio is a cross-platform software written in Java which allows to create, view and manipulate reports in many formats, providing the possibility to connect them to different kinds of data sources (databases, JSON, webservices, csv, etc.).<br>It was born on 2001 and its the perfect software for who daily deals with reporting because allows the full management of reports directly from user-interface, including to edit styles, positions and properties of each elements without write a line of code – in most cases.</p><p>Probably you’re asking in your mind «Well, but why you are talking about this software?» and the answer is that Jasper is the alternative solution.</p><h2 id="PHP-amp-Jasper"><a href="#PHP-amp-Jasper" class="headerlink" title="PHP &amp; Jasper"></a>PHP &amp; Jasper</h2><p>On 2012 was created a project called <a href="http://jasperstarter.cenote.de/" target="_blank" rel="noopener">JasperStarter</a>, a library which allows the use command line to compile and generate Jasper reports. Awesome! Isn’t it?</p><p>Well, but another step is missing.</p><p>On 2018 a good guy (<img class="github-emoji" style="display:inline" title="roll_eyes" alt="roll_eyes" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f644.png?v7" height="20" width="20">) has published a PHP package to integrate the JasperStarter library with PHP: <strong>drum roll</strong> and welcome to <a href="https://github.com/davidecaruso/jasper-php" target="_blank" rel="noopener">JasperPHP</a>.</p><blockquote><p>Note: there are many library like this existing from more time, but I prefered to create my own.</p></blockquote><h2 id="Let’s-do-a-report"><a href="#Let’s-do-a-report" class="headerlink" title="Let’s do a report"></a>Let’s do a report</h2><p>Now is time to put into practice all of this.</p><h3 id="Create-a-Jasper-Report"><a href="#Create-a-Jasper-Report" class="headerlink" title="Create a Jasper Report"></a>Create a Jasper Report</h3><p>First of all you need to install JasperStudio on your computer, <a href="https://community.jaspersoft.com/project/jaspersoft-studio/releases" target="_blank" rel="noopener">here</a> you can choose which version and for which OS to install.</p><p>Open it and create a new report <code>File &gt; New &gt; Jasper Report</code> and choose a template – for this example I have used “Blank A4 Landascape” – and choose “One Empty Record” as <em>Data Adapter</em>.</p><p><strong>Congratulation!</strong> your empty report was created. Well, go straight to the point.<br>Probably you are seeing something like that (if not maybe because I’m using the dark theme <img class="github-emoji" style="display:inline" title="sunglasses" alt="sunglasses" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f60e.png?v7" height="20" width="20">):</p><p><img src="/images/2018-02-22-jasper-studio-1.png" alt="Jasper Studio #1" title="Jasper Studio #1"></p><blockquote><p>Jasper works with <em>.jrxml</em> source files and <em>.jasper</em> compiled files, be prepared to put hands into source files.</p></blockquote><h3 id="Set-JSON-as-Jasper-data-source"><a href="#Set-JSON-as-Jasper-data-source" class="headerlink" title="Set JSON as Jasper data source"></a>Set JSON as Jasper data source</h3><p>As said, we could have many type of data source, but for this <em>minimalistic</em> example we are going to use the following as source:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Clean Code: A Handbook of Agile Software Craftsmanship"</span>,</span><br><span class="line">      <span class="attr">"authors"</span>: <span class="string">"Robert C. Martin"</span>,</span><br><span class="line">      <span class="attr">"year"</span>: <span class="string">"2008"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Design Patterns"</span>,</span><br><span class="line">      <span class="attr">"authors"</span>: <span class="string">"Erich Gamma, John Vlissides, Ralph Johnson, Richard Helm"</span>,</span><br><span class="line">      <span class="attr">"year"</span>: <span class="string">"1994"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"The Mythical Man-Month"</span>,</span><br><span class="line">      <span class="attr">"authors"</span>: <span class="string">"Fred Brooks"</span>,</span><br><span class="line">      <span class="attr">"year"</span>: <span class="string">"1975"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"The Pragmatic Programmer"</span>,</span><br><span class="line">      <span class="attr">"authors"</span>: <span class="string">"Andy Hunt"</span>,</span><br><span class="line">      <span class="attr">"year"</span>: <span class="string">"1999"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>So create a data source <code>File &gt; New &gt; Data Adapter</code>, choose “JSON File” and insert the path to your file.</p><p>On the “Outline” view, on the bottom-left corner, right-click on report name and go to “Dataset and Query Dialog”. Here by the dropdown menu select the earlier created data source, recommending to select “JSON” as language and, if works, you will see the list of fields under <em>data</em>. You can interact with them right-clicking on them, so set <em>data</em> as record node and the others as field. The result has to be like this:</p><p><img src="/images/2018-02-22-jasper-studio-2.png" alt="Jasper Studio #2" title="Jasper Studio #2"></p><p>In this way, on the “Outline” view again, you will see the fields. Simply drag-and-drop them into “Detail 1” band and will be created field instances and their relative labels.</p><p>Done, the report is ready to be generated via PHP.</p><h3 id="Generate-Jasper-report-using-PHP"><a href="#Generate-Jasper-report-using-PHP" class="headerlink" title="Generate Jasper report using PHP"></a>Generate Jasper report using PHP</h3><p>Into an existing or an empty project, run <code>composer require davidecaruso/jasper-php</code>, then move all essential files into your project (<em>jrxml</em> and JSON file). Then, your script will be like this:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new instance of JasperPHP</span></span><br><span class="line">$jasper = <span class="keyword">new</span> JasperPHP\JasperPHP();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compile jrxml file into jasper</span></span><br><span class="line">$jasper-&gt;compile(<span class="string">'/path/to/report.jrxml'</span>)-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate the report</span></span><br><span class="line">$jasper-&gt;process(</span><br><span class="line">    <span class="string">'/path/to/report.jasper'</span>,</span><br><span class="line">    <span class="keyword">null</span>,</span><br><span class="line">    [<span class="string">'xlsx'</span>],</span><br><span class="line">    [],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'json'</span>,</span><br><span class="line">        <span class="string">'json_query'</span> =&gt; <span class="string">'data'</span>, <span class="comment">// The data is under the JSON "data" layer</span></span><br><span class="line">        <span class="string">'data_file'</span> =&gt; <span class="string">'/path/to/data.json'</span></span><br><span class="line">    ]</span><br><span class="line">)-&gt;execute();</span><br></pre></td></tr></table></figure><p>Yes, it worked, but the Excel file is orrible.</p><h3 id="Tips-to-make-a-better-Jasper-Report"><a href="#Tips-to-make-a-better-Jasper-Report" class="headerlink" title="Tips to make a better Jasper Report"></a>Tips to make a better Jasper Report</h3><p>You can play with the properties of each elements and of the report itself:</p><ul><li>delete bands if unnecessary and also blank spaces in them because will be replicated also in the generated file;</li><li>change and beautify styles (borders, text styles, alignment, etc.) using the appropriate “Properties” tab;</li><li>remove pagination because is provided as default, so go to <code>Outline &gt; Click on report name &gt; Properties &gt; Advanced &gt; Pagination</code> and set “Ignore Pagination” to <code>true</code>;</li><li><p>if you need to “freeze” rows or columns do <code>Click on report name &gt; Properties &gt; Advanced &gt; Misc &gt; Edit Properties &gt; Add</code> and search for something like <strong>net.sf.jasperreports.export.xls.freeze.row</strong> (or <strong>*.column</strong>) and add a number value for row and a letter for column;</p><blockquote><p>Example of jrxml output file to freeze until to “D” column and to second row”:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.xls.freeze.row"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.jasperreports.export.xls.freeze.column"</span> <span class="attr">value</span>=<span class="string">"E"</span>/&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>use Jasper functionalities to perform operations like sum, average, etc.;</p></li><li>instead of use a JSON file you could pass to Jasper a json-encoded array, maybe with data coming from a database or use a direct connection to it;</li><li>integrate subreports into a main report (or maybe wait for the next article).</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>The following link points to the report of the example, so <a href="http://s000.tinyupload.com/?file_id=94589912227645439654" target="_blank" rel="noopener">download it</a> and generate it.</p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At least one time in the life of a developer has been happened the need to create an Excel file with data, maybe coming from database, ex
      
    
    </summary>
    
    
      <category term="php" scheme="https://davidecaruso.github.io/tags/php/"/>
    
      <category term="excel-reports" scheme="https://davidecaruso.github.io/tags/excel-reports/"/>
    
      <category term="jaspert-reports" scheme="https://davidecaruso.github.io/tags/jaspert-reports/"/>
    
  </entry>
  
  <entry>
    <title>Overloading in PHP</title>
    <link href="https://davidecaruso.github.io/2018/02/20/overloading-in-php/"/>
    <id>https://davidecaruso.github.io/2018/02/20/overloading-in-php/</id>
    <published>2018-02-20T12:10:42.000Z</published>
    <updated>2020-03-26T18:41:38.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>One of the most appreciable things of the <abbr title="Object Oriented Programming">OOP</abbr> is the <em>overloading</em>, a technique which provides the possibility to declare many methods – or properties as well – with different functionalities but with the same name. The only things in which they differ are the type and/or the number of the arguments passed to, and is thanks to them that you can choose which implementation to call.</p><p>As the other programming languages, also PHP provides this functionality but is a bit different: you can dynamically create methods and properties without declare them explicitily, but you cannot declare of them with the same name, almost the opposite of the traditional.</p><h2 id="How-it-helps"><a href="#How-it-helps" class="headerlink" title="How it helps"></a>How it helps</h2><p>It could be very helpful if you need similar functionalities, maybe with the same logic inside, and you don’t want to declare them one by one. A great way to implement that is to isolate the main logic of your function and to overload methods which will call it.</p><h2 id="Dropped-into-reality"><a href="#Dropped-into-reality" class="headerlink" title="Dropped into reality"></a>Dropped into reality</h2><p>Supposing you have a class and don’t want to retrieve its properties by itself directly but instead using another class(*): probably what you are going to do is to declare a <em>get</em> method for each property of the main class.<br>Yes, it works but look at the solution below:</p><blockquote><p>* mantain separate logics is a good attitude to write clean code and make it maintainable; read about <strong><a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener">SoC</a></strong></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnknownBookPropertyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line">    <span class="keyword">public</span> $author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        int $id, </span></span></span><br><span class="line"><span class="function"><span class="params">        string $title, </span></span></span><br><span class="line"><span class="function"><span class="params">        string $author</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;title = $title;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;author = $author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Librarian</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $book;</span><br><span class="line">    <span class="keyword">private</span> $bookProperties = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Book $book)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;book = $book;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bookProperties = array_keys(get_object_vars($book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">(string $name, array $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Trigger the getBook[Property] methods</span></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/^getBook([A-Za-z]+)/'</span>, $name, $matches)) &#123;</span><br><span class="line">            $property = strtolower($matches[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (in_array($property, <span class="keyword">$this</span>-&gt;bookProperties)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;book-&gt;$property;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnknownBookPropertyException(</span><br><span class="line">                    <span class="string">"The property '&#123;$property&#125;' does not exist."</span></span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$book = <span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">'Foo'</span>, <span class="string">'John Doe'</span>);</span><br><span class="line">$librarian = <span class="keyword">new</span> Librarian($book);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $librarian-&gt;getBookTitle(); <span class="comment">// prints 'Foo'</span></span><br><span class="line"><span class="keyword">echo</span> $librarian-&gt;getBookPublishDate(); <span class="comment">// throws an exception</span></span><br></pre></td></tr></table></figure><p>The <em>method overloading</em> is provided by the <strong>__call</strong> magic method of the <em>Librarian</em> class: inside it a regular-expression-match allows to trigger methods of which name starts with <strong>getBook</strong> followed by the name of the property you are asking for; before to return the book property we make sure that the given is one of the availables – only public properties in this case, title and author – and then return it.</p><p>Both two solution work fine but ask to yourself what could happen if book properties change, increase or decrease: you will need to declare new methods, maybe you have to delete some one else or moreover change already existing ones each time your needs change, annoying stuff in short.</p><p>In this way you don’t have to take care about of that because them are automatically declared.</p><h2 id="Other-techniques"><a href="#Other-techniques" class="headerlink" title="Other techniques"></a>Other techniques</h2><p>PHP has many magic methods for overloading that you can see<br><a href="http://php.net/manual/en/language.oop5.overloading.php" target="_blank" rel="noopener">here</a>, many of them deal with properties, others with methods and <strong>__call</strong> is one of them.</p><p> The following is the list of the available methods:</p><table><thead><tr><th>Method</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><strong><a href="http://php.net/manual/en/language.oop5.overloading.php#object.set" target="_blank" rel="noopener">__set</a></strong></td><td>Property overloading</td><td>is run when writing data to inaccessible properties.</td></tr><tr><td><strong><a href="http://php.net/manual/en/language.oop5.overloading.php#object.get" target="_blank" rel="noopener">__get</a></strong></td><td>Property overloading</td><td>is utilized for reading data from inaccessible properties.</td></tr><tr><td><strong><a href="http://php.net/manual/en/language.oop5.overloading.php#object.isset" target="_blank" rel="noopener">__isset</a></strong></td><td>Property overloading</td><td>is triggered by calling isset() or empty() on inaccessible properties.</td></tr><tr><td><strong><a href="http://php.net/manual/en/language.oop5.overloading.php#object.unset" target="_blank" rel="noopener">__unset</a></strong></td><td>Property overloading</td><td>is invoked when unset() is used on inaccessible properties.</td></tr><tr><td><strong><a href="http://php.net/manual/en/language.oop5.overloading.php#object.call" target="_blank" rel="noopener">__call</a></strong></td><td>Method overloading</td><td>is triggered when invoking inaccessible methods in an object context.</td></tr><tr><td><strong><a href="http://php.net/manual/en/language.oop5.overloading.php#object.callstatic" target="_blank" rel="noopener">__callstatic</a></strong></td><td>Method overloading</td><td>is triggered when invoking inaccessible methods in a static context.</td></tr></tbody></table><p><sup style="text-align: right;">PHP Manual. <em>Overloading</em>. Retrieved from <a href="http://php.net/manual/en/language.oop5.overloading.php" target="_blank" rel="noopener">php.net</a></sup></p><p><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;One of the most appreciable things of 
      
    
    </summary>
    
    
      <category term="oop" scheme="https://davidecaruso.github.io/tags/oop/"/>
    
      <category term="php" scheme="https://davidecaruso.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://davidecaruso.github.io/2018/02/15/hello-world/"/>
    <id>https://davidecaruso.github.io/2018/02/15/hello-world/</id>
    <published>2018-02-15T11:47:44.000Z</published>
    <updated>2020-03-26T18:41:38.635Z</updated>
    
    <content type="html"><![CDATA[<p>Could my first post’s title ever be something different to “Hello World”? Obviously, not.<br>First of all, if you don’t yet, let’s know <a href="/about">who I am</a>, and then you can read here what is this blog.</p><h2 id="The-idea"><a href="#The-idea" class="headerlink" title="The idea"></a>The idea</h2><p>The main reason which guided me to squander bunch of bytes writing this things is that my memory is very unreliable. I’m going to write here stuff that could be usefull in the future, because could be a very practical thing or because could be an ispiration idea. </p><p>Many profitable thoughts are made every single day in mind of everyone, things which will probably lost or maybe remembered with a lot of effort: one of the oldest things in the world, and also one of the oldest need of humanity, is writing, so WRITE.</p><h2 id="Hexo-makes-it-real"><a href="#Hexo-makes-it-real" class="headerlink" title="Hexo makes it real"></a>Hexo makes it real</h2><p>It is made through <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>, a powerful static-site generator written in NodeJS. Obviously, as each choice regarding which technology to use, the choice was been difficult: I was uncertain among it and <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a>, written in Go with a increasing trend and a large community support; I also found other two valid frameworks – both two sexy – doing the same (almost) things: <a href="https://nuxtjs.org/" target="_blank" rel="noopener">Nuxt</a> – of which father is VueJS – and <a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">Gatsby</a> – of which father is ReactJS.</p><p>So the question is: Why Hexo?</p><ul><li>Is not coupled with an existing standalone framework – as Gatsby with React.</li><li>Has a great integration with GitHub Pages.</li><li>Has the markdown support for post creation but you can choose a lot of template engines.</li><li>Provide by itself a cache system.</li><li>Is fast, yes it is.</li></ul><h2 id="Hexo’s-features"><a href="#Hexo’s-features" class="headerlink" title="Hexo’s features"></a>Hexo’s features</h2><p>I use it since a ridiculous time, but I already like many features. First of all is themes: Hexo has hundreds of free <a href="https://hexo.io/themes/" target="_blank" rel="noopener">themes</a> you can use, but you can obviuously create your own. </p><p>In the other side has a great command-line integration, infact you can create drafts and articles, pages and layouts, publish article or deploy your blog and may other things by terminal.</p><h2 id="How-to-install-Hexo"><a href="#How-to-install-Hexo" class="headerlink" title="How to install Hexo"></a>How to install Hexo</h2><p>Install it is very easily:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn global add hexo-cli</span><br><span class="line">hexo init blog &amp;&amp; <span class="built_in">cd</span> blog</span><br><span class="line">yarn install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Now if you visit <em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em> you can see a running Hexo blog.<br>If you want to know more things about Hexo visit its <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation page</a>.<br><br><br>Bye.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Could my first post’s title ever be something different to “Hello World”? Obviously, not.&lt;br&gt;First of all, if you don’t yet, let’s know &lt;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://davidecaruso.github.io/tags/hexo/"/>
    
      <category term="bio" scheme="https://davidecaruso.github.io/tags/bio/"/>
    
      <category term="static-site-generator" scheme="https://davidecaruso.github.io/tags/static-site-generator/"/>
    
  </entry>
  
</feed>
